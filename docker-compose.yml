# ==================================================
# 한국 부동산 데이터 집계 플랫폼 - Docker Compose 설정
# 개발 환경용 구성
# ==================================================

version: '3.8'

services:
  # PostgreSQL 데이터베이스
  database:
    image: postgres:15-alpine
    container_name: realestate-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-realestate}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      TZ: Asia/Seoul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - realestate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-realestate}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시 & 작업 큐
  redis:
    image: redis:7-alpine
    container_name: realestate-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - realestate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS API 서버
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: realestate-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-realestate}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key}
      GOV_API_KEY: ${GOV_API_KEY:-}
      PORT: 3000
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages:/packages
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - realestate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # Next.js 웹 서버
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: realestate-web
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:${API_PORT:-3000}
      PORT: 3001
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${WEB_PORT:-3001}:3001"
    depends_on:
      - api
    networks:
      - realestate-network
    command: npm run dev

  # 데이터 수집 워커
  worker:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: realestate-worker
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-realestate}
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      GOV_API_KEY: ${GOV_API_KEY:-}
      WORKER_MODE: "true"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages:/packages
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - realestate-network
    command: npm run start:worker

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: realestate-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - api
      - web
    networks:
      - realestate-network
    profiles:
      - production

  # 데이터베이스 관리 도구 (개발용)
  adminer:
    image: adminer:latest
    container_name: realestate-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: nette
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - database
    networks:
      - realestate-network
    profiles:
      - development

  # Redis Commander (개발용)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: realestate-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - realestate-network
    profiles:
      - development

# 네트워크 설정
networks:
  realestate-network:
    driver: bridge
    name: realestate-network

# 볼륨 설정
volumes:
  postgres_data:
    driver: local
    name: realestate_postgres_data
  redis_data:
    driver: local
    name: realestate_redis_data